//ExStart
//ExSummary該表包含標題和數據行,按特定的樣式選項格式化.
//ExStepSummary:0: 啟動新的文檔與文檔建構器,
//ExStepSummary:1: 使用文檔製作器啟動文檔中的新表.
//ExStepSummary:2: 輸入第一個細胞,並設定表格式識別子.
//ExStepSummary:3: 適用格式化選項,並設定自動調整行為.
//ExStepSummary:4: 加入標題行列的細胞.
//ExStepSummary:5: 輸入資料列,並列出項目名稱和數量.
//ExStepSummary:6: 保存集成的文件在檔案中.
//ExStepImage:2:images/1.png
//ExStepImage:3:images/2.png
//ExStepImage:4:images/3.png
//ExStepImage:5:images/4.png
//ExStep:0-
// 建立新的文檔對象.
Document doc = new Document();
// 建立一個建立程序,
DocumentBuilder builder = new DocumentBuilder(doc);

//ExStep:1-
// 開始文件中的新表.
Table table = builder.StartTable();

//ExStep:2-
// 在設定格式之前輸入第一個細胞.
builder.InsertCell();
// 設定表格的樣式識別符.
table.StyleIdentifier = StyleIdentifier.MediumShading1Accent1;


//ExStep:3-
// 設定方式選擇.
table.StyleOptions = 
    TableStyleOptions.FirstColumn | TableStyleOptions.RowBands | TableStyleOptions.FirstRow;
// 設定桌子的自動適應行為.	
table.AutoFit(AutoFitBehavior.AutoFitToContents);


//ExStep:4-
// 寫第一列的標題.
builder.Writeln("Item");
// 請將置置於右邊.
builder.CellFormat.RightPadding = 40;
// 輸入第二個細胞,
builder.InsertCell();
// 寫下第二列的標題.
builder.Writeln("Quantity (kg)");
// 終結了排列的創造.
builder.EndRow();

//ExStep:5-
// 開始新的行列,
builder.InsertCell();
builder.Writeln("Apples");
builder.InsertCell();
builder.Writeln("20");
builder.EndRow();
 // 輸入第二項的新行第一個細胞.
builder.InsertCell();
builder.Writeln("Bananas");
builder.InsertCell();
builder.Writeln("40");
builder.EndRow();
// 開始第三項的新行列.
builder.InsertCell();
builder.Writeln("Carrots");
builder.InsertCell(); 
builder.Writeln("50");
builder.EndRow();

//ExStep:6-
// 保存文件到指定檔案中.
doc.Save("WorkingWithTableStylesAndFormatting.BuildTableWithStyle.docx");
//ExEnd